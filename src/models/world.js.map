{"version":3,"sources":["../../../src/models/world.js"],"names":["World","position","color","pointLight","THREE","PointLight","copy","castShadow","_scene","add","sphereSize","pointLightHelper","PointLightHelper","light","DirectionalLight","multiplyScalar","shadow","mapSize","width","height","d","camera","left","right","top","bottom","far","AmbientLight"],"mappings":";;;;;;IAAMA,K;;;;;;;wCACcC,Q,EAAUC,K,EAAM;AAC5B;AACA,gBAAMC,aAAa,IAAIC,MAAMC,UAAV,CAAqBH,KAArB,CAAnB;;AAEAC,uBAAWF,QAAX,CAAoBK,IAApB,CAAyBL,QAAzB;AACAE,uBAAWI,UAAX,GAAwB,IAAxB;AACA;AACA,iBAAKC,MAAL,CAAYC,GAAZ,CAAgBN,UAAhB;;AAEA,gBAAIO,aAAa,EAAjB;AACA,gBAAIC,mBAAmB,IAAIP,MAAMQ,gBAAV,CAA2BT,UAA3B,EAAuCO,UAAvC,CAAvB;AACA,iBAAKF,MAAL,CAAYC,GAAZ,CAAgBE,gBAAhB;;AAEA,mBAAOR,UAAP;AACH;;;8CAEqBF,Q,EAAUC,K,EAAM;AAClC,gBAAMW,QAAQ,IAAIT,MAAMU,gBAAV,CAA4BZ,KAA5B,EAAmC,CAAnC,CAAd;AACAW,kBAAMZ,QAAN,CAAeK,IAAf,CAAoBL,QAApB;AACAY,kBAAMZ,QAAN,CAAec,cAAf,CAA+B,GAA/B;;AAEAF,kBAAMG,MAAN,CAAaC,OAAb,CAAqBC,KAArB,GAA6B,IAA7B;AACAL,kBAAMG,MAAN,CAAaC,OAAb,CAAqBE,MAArB,GAA8B,IAA9B;;AAEA,gBAAMC,IAAI,GAAV;;AAEAP,kBAAMG,MAAN,CAAaK,MAAb,CAAoBC,IAApB,GAA2B,CAAEF,CAA7B;AACAP,kBAAMG,MAAN,CAAaK,MAAb,CAAoBE,KAApB,GAA4BH,CAA5B;AACAP,kBAAMG,MAAN,CAAaK,MAAb,CAAoBG,GAApB,GAA0BJ,CAA1B;AACAP,kBAAMG,MAAN,CAAaK,MAAb,CAAoBI,MAApB,GAA6B,CAAEL,CAA/B;;AAEAP,kBAAMG,MAAN,CAAaK,MAAb,CAAoBK,GAApB,GAA0B,IAA1B;;AAEAb,kBAAMN,UAAN,GAAmB,IAAnB;AACA,iBAAKC,MAAL,CAAYC,GAAZ,CAAgBI,KAAhB;AACA,mBAAOA,KAAP;AACH;;;0CAEiBX,K,EAAO;AACrB,gBAAMW,QAAQ,IAAIT,MAAMuB,YAAV,CAAwBzB,KAAxB,EAA+B,CAA/B,CAAd,CADqB,CAC6B;AAClD,iBAAKM,MAAL,CAAYC,GAAZ,CAAiBI,KAAjB;AACH","file":"world.js","sourcesContent":["class World {\n    buildPointLight(position, color){\n        // create a point light\n        const pointLight = new THREE.PointLight(color);\n\n        pointLight.position.copy(position);\n        pointLight.castShadow = true;\n        //pointLight.shadow = new THREE.LightShadow( new THREE.PerspectiveCamera( 70, 1, 200, 2000 ) );\n        this._scene.add(pointLight);\n\n        var sphereSize = 10;\n        var pointLightHelper = new THREE.PointLightHelper(pointLight, sphereSize);\n        this._scene.add(pointLightHelper);\n\n        return pointLight;\n    }\n\n    buildDirectionalLight(position, color){\n        const light = new THREE.DirectionalLight( color, 1 );\n        light.position.copy(position);\n        light.position.multiplyScalar( 1.3 );\n\n        light.shadow.mapSize.width = 1024;\n        light.shadow.mapSize.height = 1024;\n\n        const d = 300;\n\n        light.shadow.camera.left = - d;\n        light.shadow.camera.right = d;\n        light.shadow.camera.top = d;\n        light.shadow.camera.bottom = - d;\n\n        light.shadow.camera.far = 1000;\n\n        light.castShadow = true;\n        this._scene.add(light);\n        return light;\n    }\n\n    buildAmbientLight(color) {\n        const light = new THREE.AmbientLight( color, 2 ); // soft white light\n        this._scene.add( light );\n    }\n}"]}