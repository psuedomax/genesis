{"version":3,"sources":["../../../../src/js/views/MainView.js"],"names":["THREE","DEBUG_MODE","MainView","container","_debug","_container","initScene","animate","light","AmbientLight","add","geometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","_scene","AxisHelper","domElement","width","renderer","clientWidth","height","clientHeight","setViewport","aspect","updateProjectionMatrix","timestamp","setTimeout","requestAnimationFrame","bind","render","_camera"],"mappings":";;;;;;;;;;AAAA;;IAAYA,K;;AACZ;;;;;;;;;;;;;;AAEA,IAAMC,aAAa,IAAnB;;IAEMC,Q;;;AAEF,sBAAYC,SAAZ,EAAsB;AAAA;;AAAA,wHACZA,SADY;;AAGlB,cAAKC,MAAL,GAAcH,UAAd;AACA,cAAKI,UAAL,GAAkBF,SAAlB;;AAEA,cAAKG,SAAL;AACA,cAAKC,OAAL;AAPkB;AAQrB;;;;wCAEc;AACX;AACA;AACH;;;oCAEU;AACP,gBAAMC,QAAQ,IAAIR,MAAMS,YAAV,CAAwB,QAAxB,CAAd,CADO,CAC2C;AAClD,2GAAYC,GAAZ,CAAiBF,KAAjB;;AAEA,gBAAMG,WAAW,IAAIX,MAAMY,cAAV,CAA0B,CAA1B,EAA6B,EAA7B,EAAiC,EAAjC,CAAjB;AACA,gBAAMC,WAAW,IAAIb,MAAMc,iBAAV,CAA6B,EAACC,OAAO,QAAR,EAA7B,CAAjB;AACA,gBAAMC,SAAS,IAAIhB,MAAMiB,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAf;AACA,2GAAYH,GAAZ,CAAiBM,MAAjB;;AAEA,gBAAI,KAAKZ,MAAT,EAAiB;AACb,qBAAKc,MAAL,CAAYR,GAAZ,CAAgB,IAAIV,MAAMmB,UAAV,CAAqB,GAArB,CAAhB;AACH;AACJ;;;iCAMO;AACJ,8GAAeC,UAAf,CAA0BC,KAA1B,GAAmC,KAAKC,QAAL,CAAcF,UAAd,CAAyBG,WAA5D;AACA,8GAAeH,UAAf,CAA0BI,MAA1B,GAAmC,KAAKF,QAAL,CAAcF,UAAd,CAAyBK,YAA5D;AACA,8GAAeC,WAAf,CAA2B,CAA3B,EAA8B,CAA9B,EAAiC,KAAKJ,QAAL,CAAcF,UAAd,CAAyBG,WAA1D,EAAuE,KAAKD,QAAL,CAAcF,UAAd,CAAyBK,YAAhG;;AAEA,4GAAaE,MAAb,GAAsB,KAAKxB,SAAL,CAAeoB,WAAf,GAA4B,KAAKpB,SAAL,CAAesB,YAAjE;AACA,4GAAaG,sBAAb;;AAEA;AACH;;;gCAEOC,S,EAAU;AAAA;;AACdC,uBAAY;AAAA,uBAAMC,sBAAuB,OAAKxB,OAAL,CAAayB,IAAb,QAAvB,CAAN;AAAA,aAAZ,EAAoE,OAAO,EAA3E;AACA,8GAAeC,MAAf,CAAuB,KAAKf,MAA5B,EAAoC,KAAKgB,OAAzC;AACH;;;4BAlBc;AACX,mBAAO,KAAK7B,UAAZ;AACH;;;;;;kBAoBUH,Q","file":"MainView.js","sourcesContent":["import * as THREE from 'three'\nimport AbstractApplication from './AbstractApplication'\n\nconst DEBUG_MODE = true;\n\nclass MainView extends AbstractApplication {\n\n    constructor(container){\n        super(container);\n\n        this._debug = DEBUG_MODE;\n        this._container = container;\n\n        this.initScene();\n        this.animate();\n    }\n\n    initComponent(){\n        // install window resizing.\n        // window.addEventListener( 'resize', this.onWindowResize.bind(this), false );\n    }\n\n    initScene(){\n        const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n        super.scene.add( light );\n\n        const geometry = new THREE.SphereGeometry( 5, 32, 32 );\n        const material = new THREE.MeshBasicMaterial( {color: 0xffff00} );\n        const sphere = new THREE.Mesh( geometry, material );\n        super.scene.add( sphere );\n\n        if (this._debug) {\n            this._scene.add(new THREE.AxisHelper(500));\n        }\n    }\n\n    get container(){\n        return this._container;\n    }\n\n    resize(){\n        super.renderer.domElement.width  = this.renderer.domElement.clientWidth;\n        super.renderer.domElement.height = this.renderer.domElement.clientHeight;\n        super.renderer.setViewport(0, 0, this.renderer.domElement.clientWidth, this.renderer.domElement.clientHeight);\n\n        super.camera.aspect = this.container.clientWidth/ this.container.clientHeight;\n        super.camera.updateProjectionMatrix();\n\n        // this.view.renderer.setSize( this.view.container.clientWidth, this.view.container.clientHeight );\n    }\n\n    animate(timestamp){\n        setTimeout( () => requestAnimationFrame( this.animate.bind(this) ), 1000 / 24 );\n        super.renderer.render( this._scene, this._camera );\n    }\n\n}\n\nexport default MainView;"]}