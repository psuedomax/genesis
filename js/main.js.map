{"version":3,"sources":["../../../src/js/main.js"],"names":["THREE","DEBUG_MODE","Main","container","_debug","_container","initScene","animate","light","AmbientLight","add","geometry","SphereGeometry","material","MeshBasicMaterial","color","sphere","Mesh","console","log","_scene","AxisHelper","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","timestamp","setTimeout","requestAnimationFrame","bind","render","_camera"],"mappings":";;;;;;;;;;AAAA;;IAAYA,K;;AACZ;;;;;;;;;;;;;;AAEA,IAAMC,aAAa,IAAnB;;IAEMC,I;;;AAEF,kBAAYC,SAAZ,EAAsB;AAAA;;AAAA,gHACZA,SADY;;AAGlB,cAAKC,MAAL,GAAcH,UAAd;AACA,cAAKI,UAAL,GAAkBF,SAAlB;;AAEA,cAAKG,SAAL;AACA,cAAKC,OAAL;AAPkB;AAQrB;;;;wCAEc;AACX;AACA;AACH;;;oCAEU;AACP,gBAAMC,QAAQ,IAAIR,MAAMS,YAAV,CAAwB,QAAxB,CAAd,CADO,CAC2C;AAClD,mGAAYC,GAAZ,CAAiBF,KAAjB;;AAEA,gBAAMG,WAAW,IAAIX,MAAMY,cAAV,CAA0B,CAA1B,EAA6B,EAA7B,EAAiC,EAAjC,CAAjB;AACA,gBAAMC,WAAW,IAAIb,MAAMc,iBAAV,CAA6B,EAACC,OAAO,QAAR,EAA7B,CAAjB;AACA,gBAAMC,SAAS,IAAIhB,MAAMiB,IAAV,CAAgBN,QAAhB,EAA0BE,QAA1B,CAAf;AACAK,oBAAQC,GAAR,CAAY,cAAZ;AACA,mGAAYT,GAAZ,CAAiBM,MAAjB;;AAEA,gBAAI,KAAKZ,MAAT,EAAiB;AACb,qBAAKgB,MAAL,CAAYV,GAAZ,CAAgB,IAAIV,MAAMqB,UAAV,CAAqB,GAArB,CAAhB;AACH;AACJ;;;yCAMe;AACZ,iBAAKC,MAAL,CAAYC,MAAZ,GAAqBC,OAAOC,UAAP,GAAoBD,OAAOE,WAAhD;AACA,iBAAKJ,MAAL,CAAYK,sBAAZ;;AAEA,iBAAKC,QAAL,CAAcC,OAAd,CAAuBL,OAAOC,UAA9B,EAA0CD,OAAOE,WAAjD;AACH;;;gCAEOI,S,EAAU;AAAA;;AACdC,uBAAY;AAAA,uBAAMC,sBAAuB,OAAKzB,OAAL,CAAa0B,IAAb,QAAvB,CAAN;AAAA,aAAZ,EAAoE,OAAO,EAA3E;AACA,sGAAeC,MAAf,CAAuB,KAAKd,MAA5B,EAAoC,KAAKe,OAAzC;AACH;;;4BAdc;AACX,mBAAO,KAAK9B,UAAZ;AACH;;;;;;kBAgBUH,I","file":"main.js","sourcesContent":["import * as THREE from 'three'\nimport AbstractApplication from 'views/AbstractApplication'\n\nconst DEBUG_MODE = true;\n\nclass Main extends AbstractApplication {\n\n    constructor(container){\n        super(container);\n\n        this._debug = DEBUG_MODE;\n        this._container = container;\n\n        this.initScene();\n        this.animate();\n    }\n\n    initComponent(){\n        // install window resizing.\n        // window.addEventListener( 'resize', this.onWindowResize.bind(this), false );\n    }\n\n    initScene(){\n        const light = new THREE.AmbientLight( 0x404040 ); // soft white light\n        super.scene.add( light );\n\n        const geometry = new THREE.SphereGeometry( 5, 32, 32 );\n        const material = new THREE.MeshBasicMaterial( {color: 0xffff00} );\n        const sphere = new THREE.Mesh( geometry, material );\n        console.log(\"sphere added\");\n        super.scene.add( sphere );\n\n        if (this._debug) {\n            this._scene.add(new THREE.AxisHelper(500));\n        }\n    }\n\n    get container(){\n        return this._container;\n    }\n\n    onWindowResize(){\n        this.camera.aspect = window.innerWidth / window.innerHeight;\n        this.camera.updateProjectionMatrix();\n\n        this.renderer.setSize( window.innerWidth, window.innerHeight );\n    }\n\n    animate(timestamp){\n        setTimeout( () => requestAnimationFrame( this.animate.bind(this) ), 1000 / 24 );\n        super.renderer.render( this._scene, this._camera );\n    }\n\n}\n\nexport default Main;"]}