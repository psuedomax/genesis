{"version":3,"sources":["../../../../src/js/ui/ball-world.js"],"names":["BallWorld","totalBall","_totalBall","_planeSize","_balls","_pos","x","y","r","fog","THREE","Fog","buildBackscene","buildSphere","buildDirectionalLight","j","length","i","Math","random","window","innerWidth","innerHeight","overlap","ball","createSphere","push","add","geometry","PlaneGeometry","material","MeshLambertMaterial","color","backScene","Mesh","receiveShadow","position","z","light","DirectionalLight","set","shadow","mapSize","width","height","d","camera","left","right","top","bottom","far","castShadow","radius","SphereGeometry","transparent","opacity","floor","obj","Scene"],"mappings":"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","file":"ball-world.js","sourcesContent":["\nclass BallWorld extends THREE.Scene {\n    constructor(totalBall){\n        super();\n        this._totalBall = totalBall;\n        this._planeSize = 2000;\n        this._balls = [];\n        this._pos = {\n            x: [],\n            y: [],\n            r: []\n        } \n\n        this.fog = new THREE.Fog( 0x11FFFFFF, 500,2000 );\n\n        this.buildBackscene();\n        this.buildSphere();\n\n        this.buildDirectionalLight(0xFFEEEEEE);\n    }\n\n    overlap(x,y,r) {\n        if((x < 100 && x > -100) || (y < 60 && y > -60)) return true;\n        for(let j = 0;j < this._balls.length;j++){\n            if((this._pos.x[j]-x)*(this._pos.x[j]-x)+(this._pos.y[j]-y)*(this._pos.y[j]-y) < (this._pos.r[j]+r)*(this._pos.r[j]+r)){\n                return true;\n            }\n        }\n        return false;\n    }\n\n    buildSphere() {\n\n        for(let i=0;i<this._totalBall;i++) {\n            const r = 60 + Math.random()*40;\n            // let x = -window.innerWidth/2+(window.innerWidth/this._totalBall*i) + Math.random()*(window.innerWidth/this._totalBall)\n            // let y = Math.floor(Math.random()*window.innerHeight/2)-10;\n            \n            let x = window.innerWidth/-2 + Math.random()*window.innerWidth\n            let y = window.innerHeight/-2 + Math.random()*window.innerHeight\n            while(this.overlap(x, y, r)){\n                x = window.innerWidth/-2 + Math.random()*window.innerWidth\n                y = window.innerHeight/-2 + Math.random()*window.innerHeight\n            }\n            const ball = this.createSphere(r, x, y);\n\n            this._balls.push(ball);\n            this._pos.x.push(x)\n            this._pos.y.push(y)\n            this._pos.r.push(r)\n            this.add(ball);\n        }\n    }\n\n    buildBackscene() {\n        const geometry = new THREE.PlaneGeometry(this._planeSize, this._planeSize);\n        const material = new THREE.MeshLambertMaterial({color: 0xFFFFFF});\n\n        const backScene = new THREE.Mesh(geometry, material);\n        backScene.receiveShadow = true;\n        backScene.position.z = -1200;\n        this.add(backScene);\n    }\n\n    buildDirectionalLight(color){\n        const light = new THREE.DirectionalLight( color, 0.7 );\n        light.position.set(0,0,500);\n\n        light.shadow.mapSize.width = 1024;\n        light.shadow.mapSize.height = 1024;\n\n        const d = 300;\n\n        light.shadow.camera.left = - d;\n        light.shadow.camera.right = d;\n        light.shadow.camera.top = d;\n        light.shadow.camera.bottom = - d;\n\n        light.shadow.camera.far = 1000;\n\n        light.castShadow = true;\n\n        this.add(light);\n        return light;\n    }\n\n    createSphere(radius, x, y){\n        const geometry = new THREE.SphereGeometry( radius, 128, 128 );\n        const material = (Math.random()<0.15) ? new THREE.MeshLambertMaterial({color: 0xEEEEEE,\n        transparent: true,\n        opacity: 0.1 }):\n            new THREE.MeshLambertMaterial( {color: Math.floor(0xffffff * Math.random())} );\n        \n        material.transparent = true;\n        material.opacity = 0.6 - Math.random()*0.2;\n        \n        const obj = new THREE.Mesh( geometry, material );\n        obj.position.set(x, y, 400-Math.random()*600);\n        obj.castShadow = true;\n        return obj;\n    }\n}\n\nexport default BallWorld;"]}